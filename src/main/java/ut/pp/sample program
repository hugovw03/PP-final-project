integers and booleans

-- D1.1 Data type

Int int = 6
Bool bool = True



-- D1.2 Simple expressions and variables

-- local, nested scopes.

        Int a
        Int b
        If (a IsBiggerThan b) {
            Bool a = True
            While (a) {
                Print (b)
            }
        }

-- Variables should also be checked for initialisation

Int a
Print(a)

-- D1.3 Simple expressions and variables
IsBiggerThan
IsSmallerThan
IsEqualThan
IsSmallerOrEqualThan
IsBiggerOrEqualThan
Add
Sub
And
Or
Mult
Div


-- D1.4 Basic statements: Assignments, if, while and print

Int a;
Int b;
If (a IsBiggerOrEqualThan b) {
}

Bool bool;
While (bool) {
}

Print(a)

-- D1.5
parbegin
    -- Parallel block
    Int x
    Int y
    If (x IsSmallerThan y) {
        -- Statements in parallel
    }
parend

// Locking
------------------------------------------------------------
Int z
-- define local or global during concurrency
runInParallel([x, y],[z]){
    -- Parallel block
    Int x
    Int y
    If (x IsSmallerThan y) {
        -- Statements in parallel
        Local Int x
    }
}

// different methods run in parallel
------------------------------------------------------------

Non-Thread-safe:

GlobalInt sum

DoAddition(Int n, Int p){
    sum = n + p
}

DoSub (Int n , Int p) {
    sum = n - p
}

Int a
Int b

RunInParallel(Int 2){
    If(this.ThreadId == 0) {
        DoAddition(a, b)
    }
    else {
    DoSub(a, b)
    }
    print(sum)
}

// Thread-safe and non-Thread-safe
-------------------------------------------------------------
Thread-safe:

Global Int sum
Global Lock lock
DoAddition{
    Local Int n = 2
    Local Int p = 8
    lock.lock
    sum = n + p
    lock.unlock
}

DoSub {
    Local Int n = 2
    Local Int p = 8
    lock.lock
    sum = n - p
    lock.unlock
}

Int a
Int b
--
# Local a,b
RunInParallel(Int 2){
    If(this.ThreadId == 0) {
        DoAddition(a, b)
    }
    else {
    DoSub(a, b)
    }
    print(sum)
}



// branch on thread ID
