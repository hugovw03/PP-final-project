Data type : integers and booleans
--------------------------------------------------------
Int int = 6;
Bool bool = True;


Basic statements: Assignments, if, while and print
--------------------------------------------------------
-- Global & Local & Lock
        Global Int a;
        Local Int b;
        Global Lock lock;

-- local, nested scopes.
        Int a;
        Int b;
        If (a IsBiggerThan b) {
            Bool a = True;
            While (a) {
                Print (b);
            }
        }
        Else {
            a = 5;
        }
-- Variables should also be checked for initialisation


Simple expressions and variables
--------------------------------------------------------
IsBiggerThan;
IsSmallerThan;
IsEqualThan;
IsSmallerOrEqualThan;
IsBiggerOrEqualThan;
Add;
Sub;
And;
Or;
Mult;


Locking
------------------------------------------------------------
-- define local or global during concurrency
Global Lock lock;
RunInParallel(2){
    -- Parallel block
    Local Int x;
    Local Int y;
    lock.lock;  //lock following blocks
    If (x IsSmallerThan y) {
        -- Statements in parallel
        Local Int x; // the local int x is in 3rd scope
    }
    lock.unlock;
}

different methods run in parallel
------------------------------------------------------------
Non-Thread-safe:

Global Int sum

DoAddition(Int n, Int p){
    sum = n + p;
}

DoSub (Int n , Int p) {
    sum = n - p;
}

Int a;
Int b;

RunInParallel(Int 2){
    If(this.ThreadId == 0) {
        DoAddition(a, b);
    }
    else {
    DoSub(a, b);
    }
    print(sum);
}

// Thread-safe and non-Thread-safe
-------------------------------------------------------------
Thread-safe:

Global Int sum;
Global Lock lock;
DoAddition{
    Local Int n = 2;
    Local Int p = 8;
    lock.lock;
    sum = n + p;
    lock.unlock;
}

DoSub {
    Local Int n = 2;
    Local Int p = 8;
    lock.lock;
    sum = n - p;
    lock.unlock;
}
// Then branch on thread ID
Int a;
Int b;

# Local a,b
RunInParallel(Int 2){
    If(this.ThreadId == 0) {
        DoAddition(a, b);
    }
    else {
    DoSub(a, b);
    }
    print(sum);
}



